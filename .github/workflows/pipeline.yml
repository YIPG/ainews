name: AI Newsletter Translation Pipeline

on:
  schedule:
    # Run weekdays at 8 AM Pacific Time (15:00 UTC)
    - cron: '0 15 * * 1-5'
  workflow_dispatch: # Allow manual trigger

env:
  PYTHON_VERSION: '3.9'

jobs:
  translate-newsletter:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Fetch latest newsletter
      env:
        FEED_URL: ${{ secrets.FEED_URL }}
      run: |
        python scripts/fetch.py
      continue-on-error: false
    
    - name: Convert HTML to Markdown
      run: |
        DATE_PREFIX=$(date -u +%Y-%m-%d)
        python scripts/convert.py "output/${DATE_PREFIX}_issue.html" > "output/${DATE_PREFIX}_issue.md"
      continue-on-error: false
    
    - name: Translate to Japanese
      env:
        AOAI_ENDPOINT: ${{ secrets.AOAI_ENDPOINT }}
        AOAI_KEY: ${{ secrets.AOAI_KEY }}
        AOAI_DEPLOYMENT: ${{ secrets.AOAI_DEPLOYMENT }}
      run: |
        DATE_PREFIX=$(date -u +%Y-%m-%d)
        python scripts/translate.py "output/${DATE_PREFIX}_issue.md" > "output/${DATE_PREFIX}_issue_ja.md"
      continue-on-error: false
    
    - name: Upload translation artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: translation-artifacts-${{ github.run_id }}
        path: |
          output/*_issue.html
          output/*_issue.md
          output/*_issue_ja.md
          output/*_meta.json
        retention-days: 30
    
    - name: Update processed GUID
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add latest.txt
        git diff --staged --quiet || git commit -m "Update processed GUID [skip ci]"
    
    - name: Push changes
      if: success()
      uses: ad-m/github-push-action@v0.8.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
    
    - name: Send Discord notification
      if: success()
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        if [ ! -z "$DISCORD_WEBHOOK" ]; then
          DATE_PREFIX=$(date -u +%Y-%m-%d)
          
          # Extract summary using the summarize script
          SUMMARY_OUTPUT=$(python scripts/summarize.py "output/${DATE_PREFIX}_issue_ja.md")
          
          # Parse the output
          TITLE=$(echo "$SUMMARY_OUTPUT" | grep "^TITLE:" | cut -d: -f2-)
          DATE=$(echo "$SUMMARY_OUTPUT" | grep "^DATE:" | cut -d: -f2-)
          SUMMARY=$(echo "$SUMMARY_OUTPUT" | sed -n '/SUMMARY_START/,/SUMMARY_END/p' | sed '1d;$d')
          
          # Escape the summary for JSON
          SUMMARY_JSON=$(echo "$SUMMARY" | jq -Rs .)
          
          # Build Discord webhook payload
          PAYLOAD=$(cat <<EOF
        {
          "embeds": [{
            "title": "🗾 AI技術ニュースレター - ${DATE}",
            "description": ${SUMMARY_JSON},
            "color": 5814783,
            "fields": [
              {
                "name": "📥 完全版をダウンロード",
                "value": "[GitHub Actionsから取得](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                "inline": false
              }
            ],
            "footer": {
              "text": "Azure OpenAI GPT-4oにより翻訳"
            },
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
          }]
        }
        EOF
          )
          
          # Send to Discord
          curl -X POST -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "$DISCORD_WEBHOOK"
        fi
    
    - name: Send failure notification
      if: failure()
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        # Send to Slack if configured
        if [ ! -z "$SLACK_WEBHOOK" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ Japanese AI Newsletter translation pipeline failed. Please check the GitHub Actions logs."}' \
            $SLACK_WEBHOOK
        fi
        
        # Send to Discord if configured
        if [ ! -z "$DISCORD_WEBHOOK" ]; then
          PAYLOAD=$(cat <<EOF
        {
          "embeds": [{
            "title": "❌ Pipeline Failed",
            "description": "Japanese AI Newsletter translation pipeline failed.",
            "color": 15548997,
            "fields": [
              {
                "name": "Action",
                "value": "Please check the [GitHub Actions logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
              }
            ],
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
          }]
        }
        EOF
          )
          
          curl -X POST -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "$DISCORD_WEBHOOK"
        fi