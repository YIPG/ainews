name: AI Newsletter Translation Pipeline

on:
  schedule:
    # Run every 6 hours on weekdays (00:00, 06:00, 12:00, 18:00 UTC)
    - cron: '0 0,6,12,18 * * 1-5'
  workflow_dispatch: # Allow manual trigger

env:
  PYTHON_VERSION: '3.9'

jobs:
  translate-newsletter:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: 'og-generator/package-lock.json'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Install OG generator dependencies
      run: |
        cd og-generator
        npm ci
    
    - name: Build OG generator
      run: |
        cd og-generator
        npm run build
    
    - name: Fetch latest newsletter
      id: fetch
      env:
        FEED_URL: ${{ secrets.FEED_URL }}
      run: |
        python scripts/fetch.py
      continue-on-error: false
    
    - name: Convert HTML to Markdown
      if: steps.fetch.outputs.has_new_content == 'true'
      run: |
        # Use RSS published date from filename
        HTML_FILE=$(ls output/*_issue.html)
        MD_FILE="${HTML_FILE%_issue.html}_issue.md"
        python scripts/convert.py "$HTML_FILE" > "$MD_FILE"
      continue-on-error: false
    
    - name: Translate to Japanese
      if: steps.fetch.outputs.has_new_content == 'true'
      env:
        AOAI_ENDPOINT: ${{ secrets.AOAI_ENDPOINT }}
        AOAI_KEY: ${{ secrets.AOAI_KEY }}
        AOAI_DEPLOYMENT: ${{ secrets.AOAI_DEPLOYMENT }}
      run: |
        # Use RSS published date from filename
        MD_FILE=$(ls output/*_issue.md)
        JA_FILE="${MD_FILE%_issue.md}_issue_ja.md"
        python scripts/translate.py "$MD_FILE" > "$JA_FILE"
      continue-on-error: false
    
    - name: Publish to GitHub Pages
      if: steps.fetch.outputs.has_new_content == 'true'
      run: |
        # Use RSS published date from filename
        MARKDOWN_FILE=$(ls output/*_issue_ja.md)
        python scripts/publish.py "$MARKDOWN_FILE"
      continue-on-error: false
    
    - name: Generate OG images
      if: steps.fetch.outputs.has_new_content == 'true'
      run: |
        # Extract date and title from the translated markdown file (uses RSS published date)
        MARKDOWN_FILE=$(ls output/*_issue_ja.md)
        RSS_DATE=$(basename "$MARKDOWN_FILE" | sed 's/_issue_ja.md//')
        TITLE=$(head -20 "$MARKDOWN_FILE" | grep "^# " | head -1 | sed 's/^# //')
        # Ensure OG directory exists
        mkdir -p docs/newsletters/og
        cd og-generator
        node dist/generate.js --title "$TITLE" --date "$RSS_DATE" --output "../docs/newsletters/og/${RSS_DATE}.png"
      continue-on-error: true
    
    - name: Upload translation artifacts
      uses: actions/upload-artifact@v4
      if: steps.fetch.outputs.has_new_content == 'true'
      with:
        name: translation-artifacts-${{ github.run_id }}
        path: |
          output/*_issue.html
          output/*_issue.md
          output/*_issue_ja.md
          output/*_meta.json
        retention-days: 30
    
    - name: Commit published newsletter
      if: steps.fetch.outputs.has_new_content == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add latest.txt docs/newsletters/ docs/feed.xml
        git diff --staged --quiet || git commit -m "Publish newsletter $(date -u +%Y-%m-%d) [skip ci]"
    
    - name: Push changes
      if: steps.fetch.outputs.has_new_content == 'true'
      uses: ad-m/github-push-action@v0.8.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
    
    - name: Post tweet
      if: steps.fetch.outputs.has_new_content == 'true'
      env:
        TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
        TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
        TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
      run: |
        # Use RSS published date from filename
        MARKDOWN_FILE=$(ls output/*_issue_ja.md)
        RSS_DATE=$(basename "$MARKDOWN_FILE" | sed 's/_issue_ja.md//')
        python scripts/tweet.py "$MARKDOWN_FILE" "$RSS_DATE"
      continue-on-error: true
    
    - name: Send Discord notification
      if: steps.fetch.outputs.has_new_content == 'true'
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        if [ ! -z "$DISCORD_WEBHOOK" ]; then
          # Use RSS published date from filename
          MARKDOWN_FILE=$(ls output/*_issue_ja.md)
          
          # Extract summary using the summarize script
          SUMMARY_OUTPUT=$(python scripts/summarize.py "$MARKDOWN_FILE")
          
          # Parse the output
          TITLE=$(echo "$SUMMARY_OUTPUT" | grep "^TITLE:" | cut -d: -f2-)
          DATE=$(echo "$SUMMARY_OUTPUT" | grep "^DATE:" | cut -d: -f2-)
          SUMMARY=$(echo "$SUMMARY_OUTPUT" | sed -n '/SUMMARY_START/,/SUMMARY_END/p' | sed '1d;$d')
          
          # Escape the summary for JSON
          SUMMARY_JSON=$(echo "$SUMMARY" | jq -Rs .)
          
          # Build Discord webhook payload
          PAYLOAD=$(cat <<EOF
        {
          "embeds": [{
            "title": "🗾 AI技術ニュースレター - ${DATE}",
            "description": ${SUMMARY_JSON},
            "color": 5814783,
            "fields": [
              {
                "name": "📖 記事を読む",
                "value": "[GitHub Pagesで読む](https://yipg.github.io/ainews/newsletters/${DATE}.html)",
                "inline": false
              }
            ],
            "footer": {
              "text": "Azure OpenAI GPT-4oにより翻訳"
            },
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
          }]
        }
        EOF
          )
          
          # Send to Discord
          curl -X POST -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "$DISCORD_WEBHOOK"
        fi
    
    
    - name: Send failure notification
      if: failure()
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        # Send to Slack if configured
        if [ ! -z "$SLACK_WEBHOOK" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ Japanese AI Newsletter translation pipeline failed. Please check the GitHub Actions logs."}' \
            $SLACK_WEBHOOK
        fi
        
        # Send to Discord if configured
        if [ ! -z "$DISCORD_WEBHOOK" ]; then
          PAYLOAD=$(cat <<EOF
        {
          "embeds": [{
            "title": "❌ Pipeline Failed",
            "description": "Japanese AI Newsletter translation pipeline failed.",
            "color": 15548997,
            "fields": [
              {
                "name": "Action",
                "value": "Please check the [GitHub Actions logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
              }
            ],
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
          }]
        }
        EOF
          )
          
          curl -X POST -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "$DISCORD_WEBHOOK"
        fi